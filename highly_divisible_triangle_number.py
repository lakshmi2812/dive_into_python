#This function tajes an input n and returns the smallest triangle number to have atleast 500 factors
#The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
#1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

def triangle_number(n):
    x = 1
    triangle_num = 0
    while x <= n:
        triangle_num += x
        x+=1
    return triangle_num

def num_of_factors(num):
    num_of_factor = 0
    y = 1
    while y <= num:
        if num % y == 0:
            num_of_factor+=1
        y = y+1
    return num_of_factor

def highly_divisible_triangle_number(n):
    i = 1
    highly_divisible = 1
    if n == 1:
        highly_divisible = 1
    else:
        factors = 0
        while factors <= n:
            tri_num = triangle_number(i)
            factors = num_of_factors(tri_num)
            if factors < n:
                i= i + 1
        highly_divisible = tri_num   
    return  highly_divisible

if __name__ == '__main__':
    print(highly_divisible_triangle_number(5) == 28)
    print(highly_divisible_triangle_number(500))
    
